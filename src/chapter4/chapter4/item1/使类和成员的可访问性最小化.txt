                                                             使类和成员的可访问性最小化


设计良好的模块会隐藏所有的实现细节，把它的API与实现清晰地隔离开来。然后，模块之间只通过它们的API进行通信，一个模块不需要知道其他模块的内部工作情况。
这个概念被称为信息隐藏，或者封装，是软件设计的基本原则之一。这么做的理由主要是因为：
它可以有效地解除组成系统的各模块之间的耦合关系，使得这些模块可以被独立的开发、测试、优化、使用、理解和修改。

第一条规则：尽可能地使每个类或者成员不被外界访问。

第二条规则：实例域（field）绝不能是公有的。
如果域是非final的，或者是一个指向可变对象的final引用，那么一旦使这个域成为公有的，就放弃了对存储在其中的值进行限制的能力。
即使域是final的，并且引用不可变的对象，当把这个域变成公有的时候，也就放弃了“切换到一种新的内部数据表示法”的灵活性。

第三条规则：第二条规则同样适用于静态域（field）。
静态域要么包含基本类型的值，要么包含指向不可变对象的引用。如果final域包含可变对象的引用，虽然引用本身不能被修改，但它所引用的对象却可以被修改。

第四条规则：类具有公有的静态final数组域，或者提供直接返回这种域的方法，这几乎总是错误的。因为长度非零的数组总是可变的。


公有类永远都不应该暴露可变的域。如果类是包级私有的，或者是私有的嵌套类，直接暴露它的数据域并没有本质的错误。
这种做法比访问方法的做法更不会产生视觉混乱，无论是在类定义中，还是在使用该类的客户端代码中。

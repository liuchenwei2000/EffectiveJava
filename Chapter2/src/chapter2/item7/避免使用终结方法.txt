                                                                       避免使用终结方法


终结方法(finalizer)，也就是Object中定义的finalize()方法，当垃圾回收器确定不存在对该对象的引用时，由垃圾回收器调用此方法。

终结方法并不能保证会被及时的执行，从一个对象变得不可到达开始，到它的终结方法被执行，这段时间长度是任意的、不确定的。
这意味着，注重时间的任务不应该由终结方法来完成。例如由终结方法来关闭一个已经被打开的文件，这是严重错误。

Java不仅不保证终结方法会被及时的执行，而且根本就不保证它们会被执行。
当一个程序终止的时候，其中某些已经无法访问的对象上的终结方法根本就没有被执行，这是完全有可能的。
所以，不应该依赖一个终结方法来更新重要的持久状态。例如依赖于终结方法来释放一个共享资源（如数据库）上的永久锁。


如果一个类封装的资源（例如文件或者线程）确实需要回收，只需提供一个显式的终止方法，并要求该类的客户端在每个实例不再有用的时候调用这个方法。
需要注意的事，该实例必须记录下自己是否已经被终止了，显式的终止方法必须在一个私有域中记录下“该对象已经不再有效了”。
如果方法是在对象已经被终止之后被调用，这些方法必须检查这个域，并抛出异常。

显式终止方法的一个典型例子是InputStream/OutputStream/Connection上的close方法，还有Timer.cancel方法。
程序示例见  ExplicitTerminationMethodDemo.java。

                                                             使可变性最小化


不可变类只是其实例不能被修改的类。每个实例中包含的所有信息都必须在创建该实例的时候就提供，并在对象的整个生命周期内固定不变。
不可变的类比可变类更加易于设计、实现和使用。它们不容易出错，并且更加安全。Java的 String 类就是不可变类。

为了使类成为不可变类，要遵循下面五条规则：
1，不要提供任何会修改对象状态的方法（mutator）。
2，保证类不会被扩展。
3，使所有的域都是final的。
4，使所有的域都成为私有的。
5，确保对于任何可变的组件的互斥访问。
如果类具有指向可变对象的域（field），则必须确保该类的客户端无法获得指向这些对象的引用。
并且永远不要用客户端提供的对象引用来初始化这样的域，也不要在任何访问方法（accessor）中返回该对象引用。
在构造器、访问方法和readObject()方法中要使用保护性拷贝技术。

示例见 chapter4.item2.ComplexNumber.java。


不可变对象的一些优点：
1，不可变对象比较简单。
不可变对象可以只有一个状态，即被创建时的状态。如果能够确保所有的构造器都建立了这个类的约束关系，
就可以保证这些约束关系在整个生命周期内永远不再发生变化，你和使用这个类的程序员无需再做额外的工作来维护这些约束关系。

2，不可变对象本质上是线程安全的，它们不要求同步。
当多个线程并发访问这样的对象时，它们不会被破坏。

3，不可变对象可以被自由的共享。
要鼓励客户尽可能地重用已有的实例，一个很简便的办法，对于频繁被用到的值，为它们提供共有的静态 final 常量。示例见 chapter4.item2.ComplexNumber.java。
也可以提供一些静态工厂，把频繁被用到的实例缓存起来，从而当现有实例可以符合请求的时候，就不必创建新的实例。

4，永远也不需要进行保护性拷贝。
实际上根本不需要做任何拷贝，不需要也不应该为不可变类提供clone方法或者拷贝构造器。

5，不可变对象惟一的缺点是，对于每个不同的值都需要一个单独的对象。
如果执行一个多步骤的操作，并且每个步骤都会产生一个新的对象，除了最后的结果之外其他的对象最终都会被丢弃，那么此时性能问题就会被暴露出来。
为此最好的办法是提供一个公有的可变配套类。在JDK中，String 是不可变类，而 StringBuilder 就是它的可变配套类。


对于第二条原则：保证类不会被扩展。。实现方法主要有三种：
1，使类成为final的。
2，使类的每一个方法都成为final的。
3，使类所有的构造函数都是私有的，或者包级私有的，并且增加公有的静态工厂来代替公有的构造函数。示例见 chapter4.item2.ComplexNumber2.java。


除非有很好的理由要让类成为可变类，否则就应该是不可变的。只有确认有必要实现满意的性能时，才应该为不可变类提供公有的可变配套类。
如果类不能被做成不可变的，那么仍然应该尽可能的限制它的可变性。降低对象可以存在的状态数，可以更容易地分析该对象的行为，同时降低出错的可能性。
因此，除非有足够的理由要使域变成非 final 的，否则要使每个域都是 final 的。
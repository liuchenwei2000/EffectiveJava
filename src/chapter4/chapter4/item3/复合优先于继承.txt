                                                             复合优先于继承


在包的内部使用继承是非常安全的，因为子类和超类的实现在同一个程序员的控制之下。对于专门为了继承而设计、
并且具有很好文档说明的类，使用继承也是非常安全的。然而，对于普通的具体类进行跨越包边界的继承，则是非常危险的。


继承打破了封装性。也就是说，子类依赖于其超类中特定功能的实现细节。超类的实现有可能会随着发行版本的不同而有所变化，
如果真的发生了变化，子类可能会遭到破坏，即使它的代码完全没有改变。因而，子类必须要跟着其超类的更新而演变。
具体示例见 chapter4.item3.InstrumentedHashSet.java。


如果不在扩展一个已有的类，而是在新的类中增加一个私有域，它引用了这个已有类的一个实例。这种设计被称作“复合”。
因为原来已有的类变成了新类的一个组成部分。新类中的每个实例方法都可以调用被包含的已有类实例中对应的方法，并返回它的结果。
这样得到的类将会非常稳固，它不依赖于已有类的实现细节。即使已有的类增加了新的方法，也不会影响新的类。
具体实例见  chapter4.item3.InstrumentedHashSet2.java。


只有当子类和超类之间确实存在子类型关系（is-a关系）时，使用继承才是恰当的。即便如此，如果子类和超类处在不同的包总，
并且超类并不是为了继承而设计的，那么继承将会导致脆弱性。为了避免脆弱性，可以用复合来代替继承。

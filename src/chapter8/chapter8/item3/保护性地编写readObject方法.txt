                                                                  保护性地编写readObject方法


readObject 方法实际上相当于另一个公有的构造器，如同其他的构造器一样，它也要求注意同样的所有注意事项。
比如必须检查其参数的有效性，在必要的时候对参数进行保护性拷贝，readObject 方法也需要这样做。

当面对一个人工仿造的字节流时，readObject 产生的对象会违反它所属的类的约束条件。

当一个对象被反序列化的时候，如果哪个域包含了客户端不应该拥有的对象引用，就必须要做保护性拷贝，这是非常重要的。
因此，对于每个可序列化的不可变类，如果包含了私有的可变组件，那在它的 readObject 方法中，必须要对这些组件进行保护性拷贝。

总之，当编写 readObject 方法的时候，要想着正在编写一个公有的构造器，无论给它传递什么样的字节流，都必须产生一个有效的实例。
不要假设这个字节流就一定代表着一个真正被序列化过的实例。下面的原则有助于编写出更加健壮的 readObject 方法：
1，对于拥有私有对象引用域的类，要保护性地拷贝这些域中的每个对象。
2，对于任何约束条件，如果检查失败，则抛出 InvalidClassException，这些检查应该跟在所有的保护性拷贝之后。
3，无论是直接方式还是间接方式，都不要调用类中任何可被覆盖的方法。

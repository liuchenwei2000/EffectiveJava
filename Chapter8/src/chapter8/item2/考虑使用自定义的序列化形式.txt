                                                                  考虑使用自定义的序列化形式


如果一个对象的物理表示法等同于它的逻辑内容，可能就适合于使用默认的序列化形式。
即使确定了默认的序列化形式是合适的，通常还必须提供一个 readObject 方法以保证约束关系和安全性。

当一个对象的物理表示法与它的逻辑内容有实质性的区别时，默认的序列化形式就不再适用，可以考虑自定义的序列化形式。
通过实现自定义的 writeObject 方法和 readObject 方法来完成自定义的序列化。


关于 transient

如果所有的实例域都是 transient 的，从技术角度而言，不调用 defaultWriteObject 和 defaultReadObject 也是允许的，但不推荐这样做。
调用它们也会影响该类的序列化形式，从而极大地增强灵活性。这样得到的序列化形式允许在以后的发行版本中增加非 transient 的实例域，并且还能保持兼容性。

在决定将一个域做成非 transient 的之前，一定要确信它的值将是该对象逻辑状态的一部分。如果正在使用自定义的序列化形式，大多数实例域或者所有的实例域都应该被标记为 transient。


关于 UID

不管选择了哪种序列化形式，都要声明一个显式的序列版本 UID，这样可以避免 UID 成为潜在的不兼容根源，而且还会带来小小的性能好处。
如果想为一个类生成一个新的版本，这个类与现有的类不兼容（incompatible），只需修改 UID 声明中的值即可。
这样一来，前一版本的实例经序列化之后，再做反序列化时会引发 InvalidClassException。


总之，当将一个类做成可序列化的时候，要仔细考虑应该采用什么样的序列化形式。只有当默认的序列化形式能够合理地描述对象的逻辑状态时，才能使用默认的序列化形式。
否则就要设计一个自定义的序列化形式，通过它合理地描述对象的状态。

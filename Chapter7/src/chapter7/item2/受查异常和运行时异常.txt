                                                                对可恢复的情况使用受查异常，对编程错误使用运行时异常


Java 提供了三种可抛出结构(throwable)：受查异常(checked exception)、运行时异常(runtime exception)和错误(error)。


对于什么时候适合使用哪种可抛出结构，一般性的原则如下：

在决定使用受查异常或是运行时异常时，主要的原则是：如果期望调用者能够适当地恢复，对于这种情况就应该使用受查异常。
通过抛出受查异常，强迫调用者在一个 catch 子句中处理该异常，或者将它传播出去。
因此，方法中声明要抛出的每个受查异常，都是对 API 用户的一种潜在提示：与异常相关联的情况是调用这个方法的一种可能结果。

有两种非受查的可抛出结构：运行时异常(runtime exception)和错误(error)。在行为上两者是等同的：
它们都是不需要也不应该被捕获的可抛出结构。如果程序抛出未受查的异常或者错误，则往往是不可恢复的情形，继续执行下去有害无益。
如果程序没有捕捉到这样的可抛出结构，将会导致当前线程停止（halt），并出现一个适当的错误信息。

用运行时异常来表明程序错误。大多数的运行时异常都表示前提违例，也就是指 API 的客户没有遵守 API 规范建立的约定。
按照惯例，错误往往被 JVM 保留用于指示资源不足、约束失败，或者其他使程序无法继续执行的条件。
由于这已经是个几乎被普遍接受的惯例，因此最好不要再实现任何新的 Error 子类，而应该是 RuntimeException 的子类。


异常也是个完全意义上的对象，可以在它上面定义任意的方法，这些方法的主要用途是为捕获异常的代码提供额外的信息，特别是关于引发这个异常情况的信息。
因为受查异常往往指明了可恢复的条件，所以，对于这样的异常，提供一些辅助方法尤其重要，通过这些方法，调用者可以获得一些有助于恢复的信息。
例如支付的时候余额不足，抛出的受查异常中提供一个方法，能够获取当前余额。

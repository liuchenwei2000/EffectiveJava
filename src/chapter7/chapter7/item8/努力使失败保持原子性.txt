                                                        努力使失败保持原子性


当一个对象抛出一个异常之后，总是期望这个对象仍然保持在一种良好的可用状态之中，即使失败发生在执行某个操作的过程中间。对于被检查的异常而言，这尤为重要，因为调用者会期望能从这种异常中恢复过来。

一般而言，一个失败的方法调用应该使对象保持“它在被调用之前的状态”。具有这种性质的方法被称为具有失败原子性的方法。

获得失败原子性的方式有：
1，设计一个非可变的对象。
2，对于在可变对象上执行操作的方法，获得失败原子性最常见的方法时，在执行操作之前检查参数的有效性。这可以使得在对象的状态被修改之前，适当的异常首先被抛出来。如Stack.pop方法：

public Object pop(){
  if(size == 0)
    throw new EmpryStatckException();
}

3，编写一段恢复代码。由它来解释操作过程中发生的失败，以及使对象回滚到操作开始之前的状态上。这种方法不常用，主要用于永久性的数据结构。
4，在对象的一份临时拷贝上执行操作，当操作完成之后，再把临时拷贝中的结果复制给原来的对象。

即使在可以实现失败原子性的场合，它也并不是所期望的。对于某些操作，它会显著地增加开销或者复杂性。

作为方法规范的一部分，任何一个异常都不应该改变对象调用该方法之前的状态。如果该规则被违反了，则API文档应该清楚的指明对象将会处于什么样的状态。
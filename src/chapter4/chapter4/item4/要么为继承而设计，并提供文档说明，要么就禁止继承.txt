                                                                        要么为继承而设计，并提供文档说明，要么就禁止继承


该类的文档必须精确地描述了改写每一个方法所带来的影响。换句话说，该类必须有文档说明其可被改写(overridable)的方法的自用性：
对于每一个公有的或受保护的方法或者构造函数，它的文档必须指明它调用了哪些可被改写的方法，是以什么顺序调用的，
每个调用的结果又是如何影响后续的处理过程的(所为可改写(overridable)的方法，是指非final的，公有的或受保护的)。

关于程序文档有一句格言：好的API文档应该描述一个方法做了什么工作，而并非描述它是如何做到的。
上面的做法违反了这句格言。这正是继承破坏了封装性带来的不幸后果。
所以，为了设计一个类的文档，以便它能够被安全的子类化，应该描述清楚那些可能导致未定义行为的实现细节。

为了使程序员能够编写出更加有效地子类，而无需承受不必要的痛苦，一个类必须通过某种形式提供适当的钩子(hook)，
以便能够进入到它的内部工作流程中，这样的形式可以是精心选择的受保护的方法，也可以是保护域，后者比较少见。
应该尽可能少量的提供受保护的方法和域，因为每一个这样的东西都代表了一项关于实现细节的承诺；
另一方面，也不能提供的太少，因为漏掉一个受保护方法可能会导致这个类无法被真正用于继承。

当为了继承的目的而设计一个有可能会被广泛使用的类时，必须要意识到，对于文档中所说明的自用模式，
以及对于其受保护方法和域隐含的实现细节，实际上已经做出了永久的承诺。
这些承诺使得在后续的版本中要提高这个类的性能，或者增加新的功能非常困难，甚至不可能。

为了允许继承，一个类还必须遵守其他一些约束：

1，构造函数一定不能调用可被改写的方法，无论是直接进行还是间接进行。
如果违反了这条规则，很有可能会导致程序失败。超类的构造函数在子类的构造函数之前运行，
所以，子类中改写版本的方法将会在子类的构造函数运行之前就先调用。
如果该改写版本的方法依赖于子类构造函数所执行的初始化工作，那么该方法将不会如预期般的执行。
示例见chapter4.item15.BrokenConstructorDemo。

2，如果该类实现了Cloneable或者Serializable接口，则无论是clone还是readObject方法，都不能调用一个可改写的方法，不管直接的方式还是间接的方式。

对于这个问题最好的解决方案是：对于那些并非为了安全的进行子类化而设计和编写文档的类，禁止子类化。
主要有两种方法：

1，把这个类声明为final的。

2，把这个类所有的构造方法都变成私有的，或者包级私有的，并且增加一些公有的静态工厂来替代构造方法。

如果一个类实现了某个能够反映其本质的接口，那么就应该禁止子类化。
如果一个具体类并没有实现标准的接口，那么禁止继承可能会给某些程序员带来不便。
如果你认为必须允许这样的类继承，那么一个合理的办法是确保这个类永远也不会调用它的可改写的方法，并且在文档中说明这一点。
也就是说，完全消除这个类中可改写的方法的自用特性。这样之后，就可以创建能够安全的进行子类化的类，改写一个方法将永远也不会影响其他任何方法的行为。

可以机械的消除一个类中课改写的方法的自用特性，而不改变它的行为。做法如下：

把每个可改写的方法的代码整体移到一个私有的辅助方法(helper)中，并且让每个可改写的方法调用它的私有辅助方法。
然后用直接调用可改写方法的私有辅助方法来代替可改写方法的每个自用调用。
                                                                                    考虑用静态工厂方法代替构造函数


类可以为它的客户提供一些静态工厂方法，返回的是类的一个实例，来替代构造函数，或者同时也提供一些构造函数。


这种技术的优点：

1，静态工厂方法有名字。
当一个类需要多个带有相同签名的构造器时，就用静态工厂方法代替构造器，并且慎重地选择名称以便突出它们之间的区别。

2，静态工厂方法不必在每次被调用的时候都创建一个新对象。
通过使用预先构建好的实例，或者将构建好的实例缓存起来，进行重复利用，从而避免创建不必要的重复对象。
这种方法类似于 Flyweight 模式。如果程序要频繁创建相同的对象，并且创建对象的代价很高，使用这项技术可以极大地提高性能。

3，静态工厂方法可以返回原返回类型的任何子类型的对象。
提供了更大的灵活性，API可以返回对象实例，同时又不会使对象的类变成公有的。这项技术适用于基于接口的框架。


这种技术的缺点

1，类如果不含公有的或者受保护的构造函数，就不能被子类化。

2，静态工厂方法与其他静态方法没有任何区别。
在API文档中，静态工厂方法不会像构造函数那样被明确标示出来，是对Java规范的背离。如果遵守标准的命名习惯，就可以将这个缺点减小到最少：
a，valueOf
该方法返回的实例与它的参数具有同样的值，使用这个名字的静态工厂方法是一些非常有效的类型转换方法。
b，getInstance
返回的实例是由方法的参数来描述的，但是不能够说与参数具有同样的值。

									接口优先于反射机制

反射（reflection）提供了“通过程序来访问关于已装载的类的信息（成员变量名称、类型、方法签名等）”的能力。

反射允许一个类使用另一个类，即使前者被编译的时候后者还根本不存在。但是存在如下的缺点：
1，丧失了编译时类型检查的好处，包括异常检查，方法调用只会在运行时失败。
2，执行反射访问所需要的代码非常笨拙和冗长，难于阅读。
3，性能损失，比普通的方法调用慢了许多。

反射功能只是在设计时被用到，通常，普通应用在运行时不应该以反射方式访问对象。

对于有些程序，它们用到的类在编译时是不可用的，但是在编译时存在适当的接口或者超类，通过它们可以引用到这些类。
如果是这种情况，就可以以反射的方式创建实例，然后通过它们的接口或者超类以正常的方式访问这些实例。

总之，如果编写的程序必须要与编译时未知的类一起工作，如有可能，仅仅使用反射机制来实例化对象，而访问对象时使用编译刻已知的某个接口或者超类。
                                                                对于可恢复的情况使用受查异常，对编程错误使用运行时异常


Java提供了一种可抛出结构(throwable)：被检查异常(cheched exception)、运行时异常(runtime exception)和错误(error)。

在决定使用一个被检查异常或是一个未被检查异常时，主要的原则是：
如果期望调用者能够恢复，那么，对于选择的条件应该使用被检查异常。
通过抛出一个被检查异常，强迫调用者在一个catch子句中处理该异常，或者将它传播到外面。
对于一个方法生命要抛出的每一个被检查的异常，它是对API用户的一种潜在提示：与异常相关联的条件是调用这个方法的一种可能结果。
API设计者让API用户面对一个被检查的异常，以此强制要求用户能从这个异常条件中恢复。

有两种未被检查的可抛出结构：运行时异常和错误。
在行为上两者是等同的：它们都是不需要，也不应该被捕获的抛出物。如果一个程序抛出一个未被检查的异常，或者一个错误，则往往是不可恢复的情形，继续执行下去有害无益。如果一个程序没有捕捉这样的可抛出结构，则将会导致当前线程停止，并伴以一个适当的错误信息。

用运行时异常来指明程序错误。大多数的运行时异常都是表明前提违例，也就是指API的客户没有遵守API规范建立的约定。
错误往往被JVM保留用于指示资源不足、约束失败，或者其他使程序无法继续执行的条件。由于这已经是一个惯例，所以不要再实现任何新的Error子类。你所实现的所有的未被检查的抛出结构都应该是RuntimeException的子类。

如果你认为一个条件可能允许恢复，那么使用一个被检查的异常；如果不是，则使用运行时异常。如果并不清楚是否有可能恢复，那么最好使用一个未被检查的异常。

API设计者要记住异常也是一个完全意义上的对象，在其上可以定义任意的方法，这些方法的主要用途是为了捕获异常的代码提供额外的信息，特别是关于引发这个异常的条件的信息。因为被检查的异常往往指示了可恢复的条件，所以，对于这样的异常，提供一些辅助方法是非常重要的，通过这些方法，调用者可以获得一些有助于恢复的信息。